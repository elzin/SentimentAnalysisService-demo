//////////////////////////////////////////////////////////
// Структура СИСТЕМЫ УПРАВЛЕНИЯ БАЗАМИ ДАННЫХ (СУБД/DBMS)
//////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// 
//  NOTE: 
//
//  Все объекты данных (СУБД, базы, таблицы, поля) имеют имена,
//  которые используются для доступа к оъектам и для размещения данных на диске.
//
//  Такие объекты данных, как таблицы и поля имеют дополнительные атрибуты:
//
//    Атрибуты таблиц данных (DATA_TABLE attributes):
//      START_SIZE(???) - Стартовый/зарезервированный размер таблицы данных.
//                        Задается кол-вом элементов.
//                        По умолчанию резервируется место для 500,000 элементов. 
//
//      SAVE_EVERY(NNN) - Инструкция сохранять копию таблицы после
//                        добавления/изменения каждых NNN записей. 
//
//      GROW_EVEN       - Способ увеличения размера - добавлять_столько_же
//      GROW_UP         - Способ увеличения размера - добавлять_в_2_раза_больше
//      GROW_DOWN       - Способ увеличения размера - добавлять_в_2_раза_меньше
//                        По умолчанию табица увелмчивается на величину START_SIZE.  
//
//    Типы табличных полей (DATA_FIELD types):
//
//      INT32    - Тип данных поля - 32-х_битовое_целое 
//      WORD     - Тип данных поля - 32-х_битовое_целое 
//      BYTE_10  - Тип данных поля - 10-и_байтовая_структура
//      STRING   - Тип данных поля - строка std::string
//      WSTRING  - Тип данных поля - строка std::wstring
//
//    Модификаторы табличных полей (DATA_FIELD modificators):
//
//      IS_UNIC     - Значения в указанном поле будут уникальными.
//                    Методы поиска будут возвращать не более одной записи,
//                    а метод добавления вернет S_FALSE в случае, когда
//                    заданное значение поля в таблице уже есть.
//                    Экономия памяти за счет отсутствия ссылок "NEXT".
//                    (Пример использования: индексы и порядковые номера)   
//                
//      NO_FIND     - Нет поиска по данному полю. Экономия памяти за счет
//                    отсутствия ссылок "NEXT" и работы с одинаковыми значениями.
//                    (Пример использования: словарные статьи и предложения,
//                     связанные со многими ключами)   
//                
//      IS_DATA     - Данные. Нет поиска по данному полю.
//                    Экономия памяти за счет отсутствия ссылок "NEXT".
//                    В случае повторяющихся значений - экономии памяти НЕТ(!). 
//                    (Пример использования: не повторяющиеся, не ключевые данные) 
//                
//      MOD_INDEXED - Дополнительный, к вышеперечмсленным, модификатор. 
//                    Позволяет осуществлять поиск в заданном интервале значений.
//                    Создает индексный файл. 
//
//
///////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////
// СУБД "SS"

#DBMS_NAME = ""  

   #DATA_BASE_NAME = "DownloadInfo"

      #DATA_TABLE_NAME = "DownloadInfo" : START_SIZE(10000), GROW_EVEN  

          #DATA_FIELD_INFO = "FilePath"            : STRING          
          #DATA_FIELD_INFO = "RequestURL"          : STRING
          #DATA_FIELD_INFO = "RequestURLLower"     : STRING - IS_UNIC
          #DATA_FIELD_INFO = "ResponseURL"         : STRING
          #DATA_FIELD_INFO = "ResponseURLLower"    : STRING - IS_UNIC
          #DATA_FIELD_INFO = "ContentSize"         : STRING
          #DATA_FIELD_INFO = "ContentData"         : STRING

      #END_DATA_TABLE

   #END_DATA_BASE   

#END_DBMS

